import os
import chainlit as cl
import asyncio
import re
import json
from dotenv import load_dotenv

from sqlalchemy import create_engine

from langchain_community.utilities import SQLDatabase
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_community.chat_models import ChatDeepInfra
from langchain_community.agent_toolkits import SQLDatabaseToolkit
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain

load_dotenv()

GREETINGS = ["hello", "hi", "xin ch√†o", "ch√†o b·∫°n", "ch√†o shop", "c·∫£m ∆°n"]

DB_KEYWORDS = [
    "s·∫£n ph·∫©m", "gi√°", "bao nhi√™u ti·ªÅn", "c√≤n h√†ng", "t·ªìn kho", "th√¥ng tin",
    "m√°y l·∫°nh", "m√°y gi·∫∑t", "tivi", "ƒëi·ªán tho·∫°i", "laptop", "tablet", "m√°y t√≠nh b·∫£ng",
    "t·ªß l·∫°nh", "n·ªìi c∆°m", "n·ªìi chi√™n", "b·∫øp ƒëi·ªán", "nh√† cung c·∫•p", "danh m·ª•c",
    "samsung", "lg", "sony", "casper", "xiaomi", "apple", "panasonic", "aqua",
    "ƒë√°nh gi√°", "nh·∫≠n x√©t", "feedback", "b·∫£o h√†nh"
]

IMAGE_BASE_PATH = "./src/public/imgs/product_image"

general_template = """B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o chuy√™n nghi·ªáp c·ªßa c·ª≠a h√†ng ƒëi·ªán m√°y TechTwo. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi chung c·ªßa kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n v√† ng·∫Øn g·ªçn.
V√≠ d·ª•:
- H·ªèi: B·∫°n l√† ai? Tr·∫£ l·ªùi: T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa TechTwo, lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n.
- H·ªèi: C·ª≠a h√†ng ·ªü ƒë√¢u? Tr·∫£ l·ªùi: Hi·ªán t·∫°i TechTwo ch·ªâ b√°n h√†ng online qua website b·∫°n nh√©.
- H·ªèi: Ch√≠nh s√°ch b·∫£o h√†nh? Tr·∫£ l·ªùi: C√°c s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c b·∫£o h√†nh ch√≠nh h√£ng theo ch√≠nh s√°ch c·ªßa nh√† s·∫£n xu·∫•t. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt s·∫£n ph·∫©m b·∫°n quan t√¢m ƒë·ªÉ t√¥i cung c·∫•p th√¥ng tin chi ti·∫øt h∆°n.

B√¢y gi·ªù, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau:
C√¢u h·ªèi: {question}
Tr·∫£ l·ªùi:"""

general_prompt = PromptTemplate.from_template(general_template)

sql_agent_prefix = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n gia v·ªÅ c∆° s·ªü d·ªØ li·ªáu MySQL c·ªßa c·ª≠a h√†ng ƒëi·ªán m√°y TechTwo.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng b·∫±ng c√°ch chuy·ªÉn ƒë·ªïi c√¢u h·ªèi ƒë√≥ th√†nh c√°c c√¢u l·ªánh SQL ch√≠nh x√°c v√† hi·ªáu qu·∫£.
H√£y lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.

** NGUY√äN T·∫ÆC H√ÄNH ƒê·ªòNG:**

1.  **LU√îN LU√îN SUY NGHƒ® TR∆Ø·ªöC KHI H√ÄNH ƒê·ªòNG (Thought Process):**
    * **Ph√¢n t√≠ch y√™u c·∫ßu:** "Ng∆∞·ªùi d√πng th·ª±c s·ª± mu·ªën bi·∫øt ƒëi·ªÅu g√¨? C√°c t·ª´ kh√≥a ch√≠nh l√† g√¨?"
    * **X√°c ƒë·ªãnh chi·∫øn l∆∞·ª£c:** "ƒê·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y, m√¨nh c·∫ßn th√¥ng tin t·ª´ nh·ªØng b·∫£ng n√†o? M√¨nh s·∫Ω c·∫ßn k·∫øt n·ªëi (JOIN) ch√∫ng nh∆∞ th·∫ø n√†o? Nh·ªØng c·ªôt n√†o ch·ª©a th√¥ng tin m√¨nh c·∫ßn?"
    * **D·ª± ƒëo√°n k·∫øt qu·∫£:** "C√¢u l·ªánh SQL m√¨nh s·∫Øp t·∫°o s·∫Ω tr·∫£ v·ªÅ d·ªØ li·ªáu g√¨?"

2.  **HI·ªÇU S√ÇU V·ªÄ D·ªÆ LI·ªÜU (Data Schema Interpretation):**
    * **∆Øu ti√™n c√°c c·ªôt m√¥ t·∫£:** Khi ng∆∞·ªùi d√πng h·ªèi chung chung v·ªÅ "th√¥ng tin", "chi ti·∫øt", "m√¥ t·∫£", "t√≠nh nƒÉng", "th√¥ng s·ªë", h√£y ∆∞u ti√™n t√¨m v√† truy v·∫•n c√°c c·ªôt c√≥ t√™n ch·ª©a `description`, `details`, `content`, `specification`.
    * **Nh·∫≠n bi·∫øt c√°c th·ª±c th·ªÉ ch√≠nh:**
        * `products`: Ch·ª©a t√™n v√† m√¥ t·∫£ chung c·ªßa s·∫£n ph·∫©m.
        * `categories`: D√πng ƒë·ªÉ l·ªçc s·∫£n ph·∫©m theo lo·∫°i (v√≠ d·ª•: 'Tivi', 'M√°y gi·∫∑t').
        * `product_variants`: C·ª±c k·ª≥ quan tr·ªçng, ch·ª©a **gi√° (`price`)** v√† **s·ªë l∆∞·ª£ng t·ªìn kho (`quantity`)** cho t·ª´ng phi√™n b·∫£n s·∫£n ph·∫©m. Lu√¥n JOIN v·ªõi b·∫£ng n√†y khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi√° ho·∫∑c t√¨nh tr·∫°ng c√≤n h√†ng.
        * `suppliers`: Ch·ª©a th√¥ng tin v·ªÅ nh√† cung c·∫•p/h√£ng s·∫£n xu·∫•t.
        * `feedbacks`: Ch·ª©a ƒë√°nh gi√°, nh·∫≠n x√©t c·ªßa kh√°ch h√†ng.

3.  **K·ª∏ THU·∫¨T TRUY V·∫§N LINH HO·∫†T (Flexible Querying):**
    * **S·ª≠ d·ª•ng `LIKE`:** ƒê·ªëi v·ªõi c√°c truy v·∫•n d·∫°ng vƒÉn b·∫£n (t√™n s·∫£n ph·∫©m, t√™n danh m·ª•c), h√£y d√πng `LIKE '%t·ª´ kh√≥a%'` ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m th·∫•y k·∫øt qu·∫£, ph√≤ng tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng kh√¥ng g√µ ch√≠nh x√°c.
    * **S·ª≠ d·ª•ng `JOIN` m·ªôt c√°ch th√¥ng minh:** Hi·ªÉu r√µ m·ªëi quan h·ªá gi·ªØa c√°c b·∫£ng ƒë·ªÉ k·∫øt n·ªëi ch√∫ng l·∫°i khi m·ªôt c√¢u h·ªèi ƒë√≤i h·ªèi th√¥ng tin t·ª´ nhi·ªÅu n∆°i.
    * **T·ªïng h·ª£p d·ªØ li·ªáu:** Khi ƒë∆∞·ª£c h·ªèi c√°c c√¢u li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng ("c√≥ bao nhi√™u lo·∫°i tivi?"), h√£y c√¢n nh·∫Øc d√πng `COUNT()`. Khi ƒë∆∞·ª£c h·ªèi v·ªÅ gi√° cao nh·∫•t/th·∫•p nh·∫•t, h√£y d√πng `MAX()`/`MIN()`.
    * **QUAN TR·ªåNG**: Khi truy v·∫•n v·ªÅ s·∫£n ph·∫©m, LU√îN bao g·ªìm c·ªôt `product_avt_img` ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh.

4.  **TR√åNH B√ÄY K·∫æT QU·∫¢ TH√ÇN THI·ªÜN (User-Friendly Response):**
    **M·∫™U TR√åNH B√ÄY CHU·∫®N:**
    ```
    üõçÔ∏è **C√°c s·∫£n ph·∫©m m√°y l·∫°nh hi·ªán c√≥ t·∫°i TechTwo:**

    üí® **[T√™n s·∫£n ph·∫©m]** - **[H√£ng]**
    üí∞ Gi√°: [gi√°] VNƒê
    ‚≠ê ƒê√°nh gi√°: [s·ªë sao]/5 sao
    üìù [M√¥ t·∫£ ng·∫Øn v·ªÅ s·∫£n ph·∫©m]
    [L·∫∑p l·∫°i cho c√°c s·∫£n ph·∫©m kh√°c]
    
    üìû Li√™n h·ªá ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† c√≥ gi√° t·ªët nh·∫•t!
    [PRODUCT_IMAGES: t√™n_file_·∫£nh1, t√™n_file_·∫£nh2, ...]
    ```
    * **Kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu th√¥:** Sau khi c√≥ k·∫øt qu·∫£ t·ª´ SQL, ƒë·ª´ng ch·ªâ li·ªát k√™ ch√∫ng. H√£y ph√¢n t√≠ch v√† t·ªïng h·ª£p th√¥ng tin th√†nh m·ªôt c√¢u tr·∫£ l·ªùi ho√†n ch·ªânh, ng·∫Øn g·ªçn, t·ª± nhi√™n, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ cho ng∆∞·ªùi d√πng d·ªÖ d√†ng n·∫Øm b·∫Øt ƒë∆∞·ª£c nh·∫•t.
    * **X·ª≠ l√Ω k·∫øt qu·∫£ r·ªóng:** N·∫øu truy v·∫•n kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ n√†o, ƒë·ª´ng im l·∫∑ng. H√£y l·ªãch s·ª± th√¥ng b√°o cho ng∆∞·ªùi d√πng: "R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
    * **FORMAT ƒê·∫∂C BI·ªÜT CHO H√åNH ·∫¢NH**: Khi c√≥ th√¥ng tin v·ªÅ s·∫£n ph·∫©m v√† c√≥ d·ªØ li·ªáu v·ªÅ h√¨nh ·∫£nh t·ª´ c·ªôt product_avt_img, h√£y LU√îN LU√îN k·∫øt th√∫c c√¢u tr·∫£ l·ªùi b·∫±ng d√≤ng ch√≠nh x√°c n√†y: 
        "[PRODUCT_IMAGES: t√™n_file_·∫£nh1, t√™n_file_·∫£nh2, ...]"
        V√≠ d·ª•: "[PRODUCT_IMAGES: P1_avt.jpg, P2_avt.jpg, P3_avt.jpg]"
        
        **L∆ØU √ù QUAN TR·ªåNG**: D√≤ng n√†y ph·∫£i ƒë∆∞·ª£c vi·∫øt CH√çNH X√ÅC nh∆∞ v√≠ d·ª•, kh√¥ng th√™m d·∫•u ch·∫•m hay k√Ω t·ª± kh√°c.

5.  **TUY·ªÜT ƒê·ªêI B·∫¢O M·∫¨T (Security First):**
    * Ch·ªâ ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán c√°c c√¢u l·ªánh `SELECT`. C·∫•m tuy·ªát ƒë·ªëi c√°c h√†nh vi thay ƒë·ªïi d·ªØ li·ªáu nh∆∞ `INSERT`, `UPDATE`, `DELETE`.

6.  **QUAN TR·ªåNG NH·∫§T - ƒê·ªäNH D·∫†NG ƒê·∫¶U RA (Output Format):**
    * B·∫°n ph·∫£i tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng g·ªìm m·ªôt chu·ªói suy nghƒ© v√† h√†nh ƒë·ªông.
    * Khi b·∫°n ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi cu·ªëi c√πng cho ng∆∞·ªùi d√πng, b·∫°n **B·∫ÆT BU·ªòC** ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng `Final Answer:`.
    * N·∫øu c√≥ h√¨nh ·∫£nh s·∫£n ph·∫©m, LU√îN k·∫øt th√∫c b·∫±ng d√≤ng "[PRODUCT_IMAGES: ...]".
"""

def extract_product_images(response_text):
    """
    Extract ALL product image filenames from response text using a robust regex.
    Handles multiple [PRODUCT_IMAGES: ...] occurrences and potential newlines/spaces.
    """
    all_images = []
    print(f"DEBUG: Searching for images in response: {response_text}")
    
    pattern = r'\[PRODUCT_IMAGES:\s*(.*?)\]'
    matches = re.findall(pattern, response_text, re.DOTALL) 
    
    if matches:
        print(f"DEBUG: Found {len(matches)} PRODUCT_IMAGES blocks.")
        for image_list_str in matches:
            current_images = [img.strip().strip("'\"") for img in image_list_str.split(',') if img.strip()]
            all_images.extend(current_images)
        print(f"DEBUG: Processed all extracted images: {all_images}")
    else:
        print("DEBUG: No [PRODUCT_IMAGES: ...] pattern found.")
    
    return all_images

def clean_response_text(response_text):
    """
    Removes ALL [PRODUCT_IMAGES: ...] lines from the response text.
    Uses the same robust pattern as extract_product_images for consistency.
    """
    clean_pattern = r'\[PRODUCT_IMAGES:\s*(.*?)\]'
    cleaned_text = re.sub(clean_pattern, '', response_text, flags=re.DOTALL).strip()
    return cleaned_text

def create_image_path(image_filename):
    """Create full path to image file"""
    if not image_filename:
        return None
        
    product_id_match = re.match(r'([A-Za-z0-9]+)_', image_filename)
    if product_id_match:
        product_id = product_id_match.group(1)
    else:
        print(f"WARNING: Could not extract product ID from filename: {image_filename}. Using root image path.")
        product_id = ""
    full_path = os.path.join(IMAGE_BASE_PATH, product_id, image_filename)
    print(f"DEBUG: Created image path: {full_path}")
    return full_path

def create_product_card_content(answer):
    """Create formatted content for product cards"""
    content = f"""
## üõí **Th√¥ng tin s·∫£n ph·∫©m**

{answer}

---
*üí° B·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ gi√° c·∫£, t√¨nh tr·∫°ng kho h√†ng ho·∫∑c c√°c th√¥ng s·ªë k·ªπ thu·∫≠t kh√°c!*
"""
    return content

def run_agent_in_thread(agent, user_input):
    """Runs the Langchain agent in a separate thread to prevent blocking the UI."""
    return agent.invoke({"input": user_input})

@cl.on_chat_start
async def start():
    """Initializes the database connection and Langchain agents when a new chat starts."""
    db_user = os.getenv('DATABASE_USER')
    db_password = os.getenv('DATABASE_PASSWORD')
    db_host = os.getenv('DATABASE_HOST')
    db_name = os.getenv('DATABASE')
    google_api_key = os.getenv('GOOGLE_API_KEY')
    deepinfra_api_token = os.getenv('DEEPINFRA_API_KEY')

    if not google_api_key and not deepinfra_api_token:
        await cl.Message(content="L·ªói: Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ API_KEY n√†o trong file .env. Vui l√≤ng ki·ªÉm tra l·∫°i.").send()
        return

    db_uri = f'mysql+mysqlconnector://{db_user}:{db_password}@{db_host}/{db_name}'

    try:
        include_tables = [
            "products", 
            "categories", 
            "product_variants", 
            "suppliers", 
            "product_details",
            "discounts",
            "feedbacks",
            "paying_methods"
        ]
        
        db = SQLDatabase(
            create_engine(db_uri),
            include_tables=include_tables,
            sample_rows_in_table_info=3
        )
        
        if deepinfra_api_token:
            llm = ChatDeepInfra(
                model_id="google/gemini-2.0-flash-001", 
                # model_kwargs={"temperature": 0.0, "max_new_tokens": 2048},
                deepinfra_api_token=deepinfra_api_token
            )
            print("INFO: Using ChatDeepInfra for LLM.")
        elif google_api_key:
            llm = ChatGoogleGenerativeAI(
                model="gemini-1.5-flash-latest",
                temperature=0,
                api_key=google_api_key
            )
            print("INFO: Using ChatGoogleGenerativeAI for LLM.")
        else:
            await cl.Message(content="L·ªói: Kh√¥ng c√≥ LLM n√†o ƒë∆∞·ª£c c·∫•u h√¨nh (thi·∫øu GOOGLE_API_KEY ho·∫∑c DEEPINFRA_API_KEY).").send()
            return

        sql_toolkit = SQLDatabaseToolkit(db=db, llm=llm)
        sql_agent = create_sql_agent(
            llm=llm,
            toolkit=sql_toolkit,
            verbose=True,
            handle_parsing_errors=True,
            prefix=sql_agent_prefix
        )
        cl.user_session.set("sql_agent", sql_agent)

        general_chain = LLMChain(llm=llm, prompt=general_prompt, verbose=True)
        cl.user_session.set("general_chain", general_chain)

        await cl.Message(content="Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa TechTwo. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?").send()

    except Exception as e:
        await cl.Message(content=f"ƒê√£ x·∫£y ra l·ªói khi kh·ªüi t·∫°o: {str(e)}. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh database v√† API keys.").send()

@cl.on_message
async def on_message(message: cl.Message):
    """Handles incoming user messages, routing them to the appropriate agent."""
    sql_agent = cl.user_session.get("sql_agent")
    general_chain = cl.user_session.get("general_chain")   

    if not sql_agent or not general_chain:
        await cl.Message(content="L·ªói: H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n ch·ªânh. Vui l√≤ng l√†m m·ªõi trang (F5) ho·∫∑c th·ª≠ l·∫°i sau √≠t ph√∫t.").send()
        return

    user_message = message.content.lower()
    
    if user_message in GREETINGS:
        await cl.Message(content="Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?").send()
        return

    if any(keyword in user_message for keyword in DB_KEYWORDS):
        msg = cl.Message(content="üîç ƒêang t√¨m ki·∫øm th√¥ng tin s·∫£n ph·∫©m cho b·∫°n...")
        await msg.send()
        
        try:
            response = await asyncio.to_thread(
                run_agent_in_thread, sql_agent, message.content
            )
            full_response_text = response.get("output", "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p v·ªõi y√™u c·∫ßu v·ªÅ s·∫£n ph·∫©m c·ªßa b·∫°n.")
            print(f"DEBUG: Full response from agent: {full_response_text}")
            
            product_images = extract_product_images(full_response_text)
            print(f"DEBUG: Extracted images for display: {product_images}")
            
            clean_answer = clean_response_text(full_response_text)
            print(f"DEBUG: Cleaned answer for display: {clean_answer}")
            
            elements = []
            if product_images:
                print(f"DEBUG: Preparing {len(product_images)} images for display.")
                for i, img_filename in enumerate(product_images[:3]): 
                    img_path = create_image_path(img_filename)
                    if img_path and os.path.exists(img_path): 
                        try:
                            image_element = cl.Image(
                                name=f"product_{i+1}",
                                display="inline",
                                path=img_path,
                                size="medium"
                            )
                            elements.append(image_element)
                            print(f"DEBUG: Added image element: {img_path}")
                        except Exception as img_error:
                            print(f"ERROR: Failed to create Chainlit image element for {img_path}: {img_error}")
                    else:
                        print(f"WARNING: Image file not found at expected path: {img_path}. Skipping this image.")

            formatted_content = create_product_card_content(clean_answer)
            
            msg.content = formatted_content
            msg.elements = elements if elements else []
            await msg.update()
            
        except Exception as e:
            print(f"CRITICAL ERROR: SQL Agent or message processing failed: {e}")
            await cl.Message(content=f"‚ùå R·∫•t ti·∫øc, ƒë√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n: {str(e)}. Vui l√≤ng th·ª≠ l·∫°i sau.").send()
        return
    
    else:
        msg = cl.Message(content="ü§î ƒêang suy nghƒ© c√¢u tr·∫£ l·ªùi...")
        await msg.send()
        
        cb = cl.AsyncLangchainCallbackHandler(stream_final_answer=True)
        response = await general_chain.acall(
            {"question": message.content},
            callbacks=[cb]
        )
        answer = response.get("text", "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y. B·∫°n c√≥ mu·ªën h·ªèi v·ªÅ s·∫£n ph·∫©m kh√¥ng?")
        msg.content = answer
        await msg.update()
